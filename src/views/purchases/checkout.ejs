<div class="row mb-4">
    <div class="col">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/products">Products</a></li>
                <li class="breadcrumb-item"><a href="/products/<%= product.product_id %>"><%= product.name %></a></li>
                <li class="breadcrumb-item active" aria-current="page">Checkout</li>
            </ol>
        </nav>
        <h1 class="display-4">Checkout</h1>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="card shadow-sm mb-4">
            <div class="card-body">
                <h5 class="card-title mb-4">Order Summary</h5>
                
                <div class="d-flex mb-4">
                    <% if (product.image_path) { %>
                        <img src="<%= product.image_path %>" alt="<%= product.name %>" class="img-thumbnail me-3" style="width: 100px; height: 100px; object-fit: cover;">
                    <% } else { %>
                        <div class="bg-secondary text-white d-flex align-items-center justify-content-center me-3" style="width: 100px; height: 100px;">
                            <span>No image</span>
                        </div>
                    <% } %>
                    
                    <div>
                        <h5><%= product.name %></h5>
                        <p class="text-muted mb-1">
                            <% if (product.categories && product.categories.length > 0) { %>
                                <%= product.categories.map(c => c.name).join(', ') %>
                            <% } %>
                        </p>
                        <p class="mb-0">Price: $<%= product.price.toFixed(2) %></p>
                    </div>
                </div>
                
                <form id="checkout-form">
                    <input type="hidden" id="product-id" value="<%= product.product_id %>">
                    
                    <div class="mb-3">
                        <label for="quantity" class="form-label">Quantity</label>
                        <input type="number" class="form-control" id="quantity" name="quantity" value="<%= quantity %>" min="1" max="<%= product.stock_quantity %>" required>
                        <div class="form-text"><%= product.stock_quantity %> available in stock</div>
                    </div>
                    
                    <hr class="my-4">
                    
                    <div class="d-flex justify-content-between mb-2">
                        <span>Subtotal:</span>
                        <span id="subtotal">$<%= (product.price * quantity).toFixed(2) %></span>
                    </div>
                    
                    <div class="d-flex justify-content-between mb-2">
                        <span>Shipping:</span>
                        <span>$0.00</span>
                    </div>
                    
                    <div class="d-flex justify-content-between mb-2">
                        <span>Tax:</span>
                        <span id="tax">$<%= (product.price * quantity * 0.08).toFixed(2) %></span>
                    </div>
                    
                    <div class="d-flex justify-content-between fw-bold fs-5 mt-2">
                        <span>Total:</span>
                        <span id="total">$<%= (product.price * quantity * 1.08).toFixed(2) %></span>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card shadow-sm mb-4">
            <div class="card-body">
                <h5 class="card-title mb-4">Payment Details</h5>
                
                <form id="payment-form" novalidate>
                    <div class="mb-3">
                        <label for="card-name" class="form-label">Name on Card</label>
                        <input type="text" class="form-control" id="card-name" required>
                        <div class="invalid-feedback">Please enter the cardholder name</div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="card-number" class="form-label">Card Number</label>
                        <input type="text" class="form-control" id="card-number" placeholder="XXXX-XXXX-XXXX-XXXX" maxlength="19" required>
                        <div class="invalid-feedback" id="card-number-feedback">Please enter a valid 16-digit card number</div>
                        <div class="form-text">Example: 4111-1111-1111-1111</div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="expiry-date" class="form-label">Expiry Date</label>
                            <input type="text" class="form-control" id="expiry-date" placeholder="MM/YY" maxlength="5" required>
                            <div class="invalid-feedback" id="expiry-feedback">Please enter a valid expiry date (MM/YY)</div>
                        </div>
                        
                        <div class="col-md-6 mb-3">
                            <label for="cvv" class="form-label">CVV</label>
                            <input type="text" class="form-control" id="cvv" placeholder="XXX" maxlength="4" required>
                            <div class="invalid-feedback" id="cvv-feedback">Please enter a valid 3-4 digit CVV</div>
                        </div>
                    </div>
                    
                    <div class="alert alert-danger d-none" id="error-message"></div>
                    
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary">Complete Purchase</button>
                        <a href="/products/<%= product.product_id %>" class="btn btn-outline-secondary">Cancel</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>

    document.getElementById('card-number').addEventListener('input', function(e) {
        let val = this.value.replace(/\D/g, ''); 
        let newVal = '';
        
        for (let i = 0; i < val.length; i++) {
            if (i > 0 && i % 4 === 0) {
                newVal += '-';
            }
            newVal += val[i];
        }
        
        this.value = newVal;
        
        
        
        if (this.value.length > 0 && (!isValid || this.value.replace(/\D/g, '').length < 16)) {
            this.classList.add('is-invalid');
        } else {
            this.classList.remove('is-invalid');
        }
    });
    
    document.getElementById('expiry-date').addEventListener('input', function(e) {
        let val = this.value.replace(/\D/g, ''); // remove non-digits
        
        if (val.length > 2) {
            this.value = val.substring(0, 2) + '/' + val.substring(2);
        } else {
            this.value = val;
        }
        
        const isValid = /^\d{2}\/\d{2}$/.test(this.value);
        
        if (this.value.length > 0) {
            if (!isValid) {
                this.classList.add('is-invalid');
                document.getElementById('expiry-feedback').textContent = 'Please enter a valid expiry date (MM/YY)';
            } else {
                const month = parseInt(this.value.substring(0, 2));
                const year = parseInt('20' + this.value.substring(3, 5));
                const currentDate = new Date();
                const currentYear = currentDate.getFullYear();
                const currentMonth = currentDate.getMonth() + 1;
                
                if (month < 1 || month > 12) {
                    this.classList.add('is-invalid');
                    document.getElementById('expiry-feedback').textContent = 'Month must be between 1 and 12';
                } else if (year < currentYear || (year === currentYear && month < currentMonth)) {
                    this.classList.add('is-invalid');
                    document.getElementById('expiry-feedback').textContent = 'Card has expired';
                } else {
                    this.classList.remove('is-invalid');
                }
            }
        } else {
            this.classList.remove('is-invalid');
        }
    });
    
    document.getElementById('cvv').addEventListener('input', function(e) {
        this.value = this.value.replace(/\D/g, ''); 
        
        const isValid = /^\d{3,4}$/.test(this.value);
        
        if (this.value.length > 0 && !isValid) {
            this.classList.add('is-invalid');
        } else {
            this.classList.remove('is-invalid');
        }
    });
    
    document.getElementById('card-name').addEventListener('input', function(e) {
        if (this.value.trim().length === 0) {
            this.classList.add('is-invalid');
        } else {
            this.classList.remove('is-invalid');
        }
    });
    
    document.getElementById('quantity').addEventListener('change', function() {
        const quantity = parseInt(this.value);
        const price = parseFloat(<%= product.price %>);
        
        const subtotal = price * quantity;
        const tax = subtotal * 0.08;
        const total = subtotal + tax;
        
        document.getElementById('subtotal').textContent = '$' + subtotal.toFixed(2);
        document.getElementById('tax').textContent = '$' + tax.toFixed(2);
        document.getElementById('total').textContent = '$' + total.toFixed(2);
    });
    
    document.getElementById('payment-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const errorMessage = document.getElementById('error-message');
        errorMessage.classList.add('d-none');
        
        const cardName = document.getElementById('card-name');
        const cardNumber = document.getElementById('card-number');
        const expiryDate = document.getElementById('expiry-date');
        const cvv = document.getElementById('cvv');
        
        let isValid = true;
        
        if (cardName.value.trim() === '') {
            cardName.classList.add('is-invalid');
            isValid = false;
        }

        if (!cardNumber.value.match(/^(\d{4}-){3}\d{4}$/)) {
            cardNumber.classList.add('is-invalid');
            isValid = false;
        }
        

        if (!expiryDate.value.match(/^\d{2}\/\d{2}$/)) {
            expiryDate.classList.add('is-invalid');
            isValid = false;
        } else {
            const month = parseInt(expiryDate.value.substring(0, 2));
            const year = parseInt('20' + expiryDate.value.substring(3, 5));
            const currentDate = new Date();
            const currentYear = currentDate.getFullYear();
            const currentMonth = currentDate.getMonth() + 1;
            
            if (month < 1 || month > 12) {
                expiryDate.classList.add('is-invalid');
                document.getElementById('expiry-feedback').textContent = 'Month must be between 1 and 12';
                isValid = false;
            } else if (year < currentYear || (year === currentYear && month < currentMonth)) {
                expiryDate.classList.add('is-invalid');
                document.getElementById('expiry-feedback').textContent = 'Card has expired';
                isValid = false;
            }
        }
        
        if (!cvv.value.match(/^\d{3,4}$/)) {
            cvv.classList.add('is-invalid');
            isValid = false;
        }
        
        if (!isValid) {
            errorMessage.textContent = 'Please correct the errors in the form';
            errorMessage.classList.remove('d-none');
            return;
        }
        
        const productId = document.getElementById('product-id').value;
        const quantity = parseInt(document.getElementById('quantity').value);
        
        const submitButton = this.querySelector('button[type="submit"]');
        submitButton.disabled = true;
        submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';
        
        const cardDigits = cardNumber.value.replace(/\D/g, '');
        const isValidCard = validateCreditCard(cardDigits);
        
        if (!isValidCard) {
            errorMessage.textContent = 'Invalid card number. Please check and try again.';
            errorMessage.classList.remove('d-none');
            submitButton.disabled = false;
            submitButton.textContent = 'Complete Purchase';
            return;
        }
        
        fetch('/api/purchases', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': 'Bearer ' + (localStorage.getItem('token') || '')
            },
            body: JSON.stringify({
                productId,
                quantity
            })
        })
        .then(response => {
            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                return response.json().then(data => {
                    if (!response.ok) {
                        throw new Error(data.message || `Error: ${response.status}`);
                    }
                    return data;
                });
            } else {
                throw new Error(`Server returned non-JSON response (${response.status})`);
            }
        })
        .then(data => {
            if (data.purchase) {
                window.location.href = '/orders/confirmation/' + data.purchase.purchase_id;
            } else {
                throw new Error(data.message || 'Failed to process purchase. Please try again.');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            errorMessage.textContent = error.message || 'An error occurred. Please try again.';
            errorMessage.classList.remove('d-none');
            
            submitButton.disabled = false;
            submitButton.textContent = 'Complete Purchase';
        });
    });
    
    function validateCreditCard(cardNumber) {
        cardNumber = cardNumber.replace(/\D/g, '');
        
        if (cardNumber.length < 13 || cardNumber.length > 19) {
            return false;
        }
        

        let sum = 0;
        let doubleUp = false;
        
        for (let i = cardNumber.length - 1; i >= 0; i--) {
            let digit = parseInt(cardNumber.charAt(i));
            
            if (doubleUp) {
                digit *= 2;
                if (digit > 9) {
                    digit -= 9;
                }
            }
            
            sum += digit;
            doubleUp = !doubleUp;
        }
        
        return (sum % 10) === 0;
    }
</script>